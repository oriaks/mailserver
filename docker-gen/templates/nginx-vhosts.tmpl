{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
  # {{ .Container.Node.Name }}/{{ .Container.Name }}
  server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
    {{ else }}
  # {{ .Container.Name }}
  server {{ .Address.IP }}:{{ .Address.Port }};
    {{ end }}
  {{ else }}
  # {{ .Container.Name }}
  server {{ .Container.IP }} down;
  {{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }

# Enables gzipping of responses for the specified MIME types
  gzip_types application/javascript application/json application/x-javascript application/xml application/xml+rss text/css text/javascript text/plain text/xml;

# Setup log default settings
  access_log off;
  log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" ';

# Proxy headers
{{ if (exists "/etc/nginx/proxy.conf") }}
  include /etc/nginx/proxy.conf;
{{ else }}
  chunked_transfer_encoding on;
  client_max_body_size 0;
  send_timeout 600;
  proxy_connect_timeout 600;
  proxy_http_version 1.1;
  proxy_buffering off;
  proxy_read_timeout 600;
  proxy_request_buffering off;
  proxy_send_timeout 600;
  proxy_set_header Connection $proxy_connection;
  proxy_set_header Host $http_host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Real-IP $remote_addr;
{{ end }}

  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  #ssl_dhparam /etc/nginx/cert.d/dhparam.pem;

  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # intermediate configuration. tweak to your needs.
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
  ssl_prefer_server_ciphers on;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  ## verify chain of trust of OCSP response using Root CA and Intermediate certs
  #ssl_trusted_certificate /etc/nginx/cert.d/ca-certs.pem

  resolver 8.8.8.8 8.8.4.4;

  # Default HTTP host
  server {
    server_name _;
    listen 80;
    listen 443 ssl http2;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    return 503;
  }

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
# {{ $host }}
upstream {{ $host }} {
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ $address := index $container.Addresses 0 }}
    {{ template "upstream" (dict "Container" $container "Address" $address) }}
  {{/* If more than one port exposed, use the one matching UPSTREAM_PORT env var, falling back to standard web port 80 */}}
  {{ else }}
    {{ $port := coalesce $container.Env.UPSTREAM_PORT "80" }}
    {{ $address := where $container.Addresses "Port" $port | first }}
    {{ template "upstream" (dict "Container" $container "Address" $address) }}
  {{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the UPSTREAM_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.UPSTREAM_PROTO")) "http" }}

{{/* Get the HTTPS_ALLOW defined by containers w/ the same vhost, falling back to "true" */}}
{{ $allow_https := or (first (groupByKeys $containers "Env.HTTPS_ALLOW")) (first (groupByKeys $containers "Env.HTTPS_FORCE")) "true" }}
{{ $allow_https := parseBool $allow_https }}

{{/* Get the HTTPS_FORCE defined by containers w/ the same vhost, falling back to "false" */}}
{{ $force_https := or (first (groupByKeys $containers "Env.HTTPS_FORCE")) "false" }}
{{ $force_https := parseBool $force_https }}

{{/* Get the best matching cert by name for the vhost. */}}
{{ $certKey  := "/etc/ssl/private/ssl-cert-snakeoil.key" }}
{{ $cert     := "/etc/ssl/certs/ssl-cert-snakeoil.pem"   }}
{{ $certDir  := "/etc/nginx/cert.d/default" }}
{{ $certKey1 := "" }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/key.pem"       $certDir ) ) ) ( printf "%s/key.pem"       $certDir ) $certKey1 }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/privkey.pem"   $certDir ) ) ) ( printf "%s/privkey.pem"   $certDir ) $certKey1 }}
{{ $cert1    := "" }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/cert.pem"      $certDir ) ) ) ( printf "%s/cert.pem"      $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/chain.pem"     $certDir ) ) ) ( printf "%s/chain.pem"     $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/fullchain.pem" $certDir ) ) ) ( printf "%s/fullchain.pem" $certDir ) $cert1 }}
{{ $certKey  := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $certKey1 $certKey }}
{{ $cert     := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $cert1    $cert    }}
{{ $certDir  := when ( gt (len (closest ( dir "/etc/letsencrypt/live" ) $host)) 0 ) ( printf "/etc/letsencrypt/live/%s" ( closest ( dir "/etc/letsencrypt/live" ) $host ) ) "" }}
{{ $certKey1 := "" }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/key.pem"       $certDir ) ) ) ( printf "%s/key.pem"       $certDir ) $certKey1 }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/privkey.pem"   $certDir ) ) ) ( printf "%s/privkey.pem"   $certDir ) $certKey1 }}
{{ $cert1    := "" }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/cert.pem"      $certDir ) ) ) ( printf "%s/cert.pem"      $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/chain.pem"     $certDir ) ) ) ( printf "%s/chain.pem"     $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/fullchain.pem" $certDir ) ) ) ( printf "%s/fullchain.pem" $certDir ) $cert1 }}
{{ $certKey  := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $certKey1 $certKey }}
{{ $cert     := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $cert1    $cert    }}
{{ $certDir  := when ( gt (len (closest ( dir "/etc/nginx/cert.d" ) $host)) 0 ) ( printf "/etc/nginx/cert.d/%s" ( closest ( dir "/etc/nginx/cert.d" ) $host ) ) "" }}
{{ $certKey1 := "" }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/key.pem"       $certDir ) ) ) ( printf "%s/key.pem"       $certDir ) $certKey1 }}
{{ $certKey1 := when ( and ( ne $certDir "" ) ( exists ( printf "%s/privkey.pem"   $certDir ) ) ) ( printf "%s/privkey.pem"   $certDir ) $certKey1 }}
{{ $cert1    := "" }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/cert.pem"      $certDir ) ) ) ( printf "%s/cert.pem"      $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/chain.pem"     $certDir ) ) ) ( printf "%s/chain.pem"     $certDir ) $cert1 }}
{{ $cert1    := when ( and ( ne $certDir "" ) ( exists ( printf "%s/fullchain.pem" $certDir ) ) ) ( printf "%s/fullchain.pem" $certDir ) $cert1 }}
{{ $certKey  := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $certKey1 $certKey }}
{{ $cert     := when ( and ( ne $certKey1 "" ) ( ne $cert1 "" ) ) $cert1    $cert    }}

{{ if ($force_https) }}
  server {
    server_name {{ $host }};
    listen 80 {{ $default_server }};

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
  }
{{ end }}
  server {
    server_name {{ $host }};
  {{ if (not $force_https) }}
    listen 80 {{ $default_server }};
  {{ end }}
  {{ if ($allow_https) }}
    listen 443 ssl http2 {{ $default_server }};

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate {{ $cert }};
    ssl_certificate_key {{ $certKey }};
    {{ if (exists (printf "/etc/nginx/cert.d/%s/dhparam.pem" $host)) }}
    # ssl_dhparam {{ printf "/etc/nginx/cert.d/%s/dhparam.pem" $host }};
    {{ end }}
  {{ end }}

    access_log /var/log/nginx/access.log vhost;

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
    #include /etc/nginx/vhost.d/default;
  {{ end }}

    location /.well-known/ {
      auth_basic off;
      root /var/www/html;
      try_files $uri =404;
    }

    location / {
      proxy_pass {{ trim $proto }}://{{ trim $host }};

  {{ if (exists (printf "/etc/nginx/htpasswd.d/%s" $host)) }}
      auth_basic "Restricted {{ $host }}";
      auth_basic_user_file {{ (printf "/etc/nginx/htpasswd.d/%s" $host) }};
  {{ end }}

  {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
      include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
  {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
      #include /etc/nginx/vhost.d/default_location;
  {{ end }}
    }
  }
{{ end }}
